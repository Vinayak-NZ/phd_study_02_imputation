data[[paste0(var, "_t2")]] <- ifelse(is.na(data[[paste0(var, "_t2")]]),
data[[paste0(var, "_t1")]], data[[paste0(var, "_t2")]])
return(data)
}
## ---- simulate-locf-bulk
simulate_locf_bulk <- function(input, var){
output <- list()
sim_iterations <- length(input)
for (sim in 1:sim_iterations) {
locf_simulation <- simulate_locf(data = input[[sim]],
var = var)
output[[paste(sim)]] <- locf_simulation
}
return(output)
}
## ---- prepare-mice-output
prepare_mice_output <- function(mi_object, var, uprange){
miceImps <- list()
for (i in 1:mi_object$m){
miceImps[[i]] <- complete(mi_object, i)
miceImps[[i]][[paste0(var, "_t1")]]  <-
ifelse(miceImps[[i]][[paste0(var, "_t1")]] < uprange,
miceImps[[i]][[paste0(var, "_t1")]],
uprange)
miceImps[[i]][[paste0(var, "_t2")]]  <-
ifelse(miceImps[[i]][[paste0(var, "_t2")]] < uprange,
miceImps[[i]][[paste0(var, "_t2")]],
uprange)
}
return(miceImps)
}
## ---- prepare-mice-long-data
prepare_mice_long <- function(miceImps, var){
for (i in 1:length(miceImps)){
miceImps[[i]] <- miceImps[[i]][, c("unique_id",
"randomisation",
"age_cat",
"sex",
"education_cat",
paste0(var, "_t0"),
paste0(var, "_t1"),
paste0(var, "_t2"))]
setDT(miceImps[[i]])
miceImps[[i]] <- melt(miceImps[[i]],
id.vars = c("unique_id",
"randomisation",
"age_cat",
"sex",
"education_cat"),
variable.name = "time",
value.name = var)
miceImps[[i]][, "time"] <- ifelse(miceImps[[i]][, "time"] == paste0(var, "_t0"),
"baseline",
ifelse(miceImps[[i]][, "time"] == paste0(var, "_t1"),
"week-12",
"week-24"))
miceImps[[i]]$time <- as.factor(miceImps[[i]]$time)
miceImps[[i]][[var]] <- abs(as.numeric(miceImps[[i]][[var]]))
miceImps[[i]] <- as.data.frame(miceImps[[i]])
}
return(miceImps)
}
## ---- pool-mice-models
pool_mice_model <- function(miceImps, var){
if(var == "selfcare"){
formula <- selfcare ~ randomisation + time + randomisation*time +
age_cat + sex +
education_cat + (1|unique_id)
}else if(var == "physical_activity"){
formula <- physical_activity ~ randomisation + time + randomisation*time +
age_cat + sex +
education_cat + (1|unique_id)
}
mice_models <- list()
mice_models_summary <- list()
M <- length(miceImps)
for (mm in 1:M){
mice_models[[mm]] <- lme4::lmer(formula, data = miceImps[[mm]], REML=FALSE)
mice_models_summary[[mm]] <- summary(mice_models[[mm]])$coefficients[2]
}
mice_pooled_results <- lmer_pool(mice_models, level = .95)
mice_pooled_output <- summary(mice_pooled_results)
mice_treatment_effect <- unlist(mice_models_summary, use.names=FALSE)
return(list(mice_pooled_results, mice_pooled_output, mice_treatment_effect))
}
## ---- mice-models-pipeline
apply_mice_model <- function(mi_object, var, uprange){
prepare_var <- prepare_mice_output(mi_object = mi_object,
var = var,
uprange = uprange)
long_data <- prepare_mice_long(miceImps = prepare_var,
var = var)
pool_mice_model <- pool_mice_model(miceImps = long_data,
var = var)
return(pool_mice_model)
}
## ---- mice-models-pipeline-bulk
model_mice_bulk <- function(input, var, uprange){
output <- list()
sim_iterations <- length(input)
for (sim in 1:sim_iterations) {
mice_model <- apply_mice_model(mi_object = input[[sim]],
var = var,
uprange = uprange)
output[[paste(sim)]] <- mice_model
}
return(output)
}
## ---- prepare-j2r-output
prepare_j2r_output <- function(mi_object, var, uprange){
j2rImps <- list()
for (i in 1:length(mi_object)){
j2rImps[[i]] <- mi_object[[i]]
j2rImps[[i]][[paste0(var, "_t1")]]  <-
ifelse(j2rImps[[i]][[paste0(var, "_t1")]] < uprange,
j2rImps[[i]][[paste0(var, "_t1")]],
uprange)
j2rImps[[i]][[paste0(var, "_t2")]]  <-
ifelse(j2rImps[[i]][[paste0(var, "_t2")]] < uprange,
j2rImps[[i]][[paste0(var, "_t2")]],
uprange)
}
return(j2rImps)
}
## ---- prepare-j2r-long-data
prepare_j2r_long <- function(j2rImps, var){
for (i in 1:length(j2rImps)){
j2rImps[[i]] <- j2rImps[[i]][, c("unique_id",
"randomisation",
"age_cat",
"sex",
"education_cat",
paste0(var, "_t0"),
paste0(var, "_t1"),
paste0(var, "_t2"))]
setDT(j2rImps[[i]])
j2rImps[[i]] <- melt(j2rImps[[i]],
id.vars = c("unique_id",
"randomisation",
"age_cat",
"sex",
"education_cat"),
variable.name = "time",
value.name = var)
j2rImps[[i]][, "time"] <- ifelse(j2rImps[[i]][, "time"] == paste0(var, "_t0"),
"baseline",
ifelse(j2rImps[[i]][, "time"] == paste0(var, "_t1"),
"week-12",
"week-24"))
j2rImps[[i]]$time <- as.factor(j2rImps[[i]]$time)
j2rImps[[i]][[var]] <- abs(as.numeric(j2rImps[[i]][[var]]))
j2rImps[[i]] <- as.data.frame(j2rImps[[i]])
}
return(j2rImps)
}
## ---- pool-j2r-models
pool_j2r_model <- function(j2rImps, var){
if(var == "selfcare"){
formula <- selfcare ~ randomisation + time + randomisation*time +
age_cat + sex +
education_cat + (1|unique_id)
}else if(var == "physical_activity"){
formula <- physical_activity ~ randomisation + time + randomisation*time +
age_cat + sex +
education_cat + (1|unique_id)
}
j2r_models <- list()
j2r_models_summary <- list()
M <- length(j2rImps)
for (mm in 1:M){
j2r_models[[mm]] <- lme4::lmer(formula, data = j2rImps[[mm]], REML=FALSE)
j2r_models_summary[[mm]] <- summary(j2r_models[[mm]])$coefficients[2]
}
j2r_pooled_results <- lmer_pool(j2r_models, level = .95)
j2r_pooled_output <- summary(j2r_pooled_results)
j2r_treatment_effect <- unlist(j2r_models_summary, use.names=FALSE)
return(list(j2r_pooled_results, j2r_pooled_output, j2r_treatment_effect))
}
## ---- j2r-models-pipeline
apply_j2r_model <- function(mi_object, var, uprange){
prepare_var <- prepare_j2r_output(mi_object = mi_object,
var = var,
uprange = uprange)
long_data <- prepare_j2r_long(j2rImps = prepare_var,
var = var)
pool_j2r_model <- pool_j2r_model(j2rImps = long_data,
var = var)
return(pool_j2r_model)
}
## ---- j2r-models-pipeline-bulk
model_j2r_bulk <- function(input, var, uprange){
output <- list()
sim_iterations <- length(input)
for (sim in 1:sim_iterations) {
j2r_model <- apply_j2r_model(mi_object = input[[sim]],
var = var,
uprange = uprange)
output[[paste(sim)]] <- j2r_model
}
return(output)
}
## ---- prepare-locf-output
prepare_locf_output <- function(imp_object, var){
input_variables <-
colnames(imp_object)[grepl(var, names(imp_object))]
subset_data <- imp_object[, c("unique_id",
"randomisation",
"age_cat",
"sex",
"education_cat",
input_variables)]
subset_data <- subset_data[complete.cases(subset_data), ]
return(subset_data)
}
## ---- prepare-locf-long-data
prepare_locf_long <- function(imp_object, var){
setDT(imp_object)
locf_long_data <- melt(imp_object,
id.vars = c("unique_id",
"randomisation",
"age_cat",
"sex",
"education_cat"),
variable.name = "time",
value.name = var)
locf_long_data[, "time"] <- ifelse(locf_long_data[, "time"] == paste0(var, "_t0"),
"baseline",
ifelse(locf_long_data[, "time"] == paste0(var, "_t1"),
"week-12",
"week-24"))
return(locf_long_data)
}
## ---- build-locf-model
build_locf_model <- function(imp_object, var){
if(var == "selfcare"){
locf_model <- lmer(selfcare ~ randomisation + time + randomisation*time +
age_cat + sex +
education_cat + (1|unique_id),
data = imp_object,
REML = F)
}else if(var == "physical_activity"){
locf_model <- lmer(physical_activity ~ randomisation + time + randomisation*time +
age_cat + sex +
education_cat + (1|unique_id),
data = imp_object,
REML = F)
}
locf_model_summary <- summary(locf_model)
locf_treatment_effect <- locf_model_summary$coefficients[2]
locf_confint <- confint(locf_model)
return(list(locf_model_summary, locf_confint, locf_treatment_effect))
}
## ---- locf-model-pipeline
apply_locf_model <- function(imp_object, var){
prepare_var <- prepare_locf_output(imp_object = imp_object,
var = var)
long_data <- prepare_locf_long(imp_object = prepare_var,
var = var)
locf_model <- build_locf_model(imp_object = long_data,
var = var)
return(locf_model)
}
## ---- locf-model-pipeline-bulk
model_locf_bulk <- function(input, var){
output <- list()
sim_iterations <- length(input)
for (sim in 1:sim_iterations) {
locf_model <- apply_locf_model(imp_object = input[[sim]],
var = var)
output[[paste(sim)]] <- locf_model
}
return(output)
}
## ---- prepare-lwd-data
prep_lwd_data <- function(data, var){
input_variables <-
colnames(data)[grepl(var, names(data))]
subset_data <- data[, c("unique_id",
"randomisation",
"age_cat",
"sex",
"education_cat",
input_variables)]
subset_data <- subset_data[complete.cases(subset_data), ]
return(subset_data)
}
## ---- prepare-lwd-long-data
prepare_lwd_long <- function(data, var){
setDT(data)
lwd_long_data <- melt(data,
id.vars = c("unique_id",
"randomisation",
"age_cat",
"sex",
"education_cat"),
variable.name = "time",
value.name = var)
lwd_long_data[, "time"] <- ifelse(lwd_long_data[, "time"] == paste0(var, "_t0"),
"baseline",
ifelse(lwd_long_data[, "time"] == paste0(var, "_t1"),
"week-12",
"week-24"))
return(lwd_long_data)
}
## ---- build-lwd-model
build_lwd_model <- function(data, var){
if(var == "selfcare"){
lwd_model <- lmer(selfcare ~ randomisation + time + randomisation*time +
age_cat + sex +
education_cat + (1|unique_id),
data = data,
REML = F)
}else if(var == "physical_activity"){
lwd_model <- lmer(physical_activity ~ randomisation + time + randomisation*time +
age_cat + sex +
education_cat + (1|unique_id),
data = data,
REML = F)
}
lwd_model_summary <- summary(lwd_model)
lwd_treatment_effect <- lwd_model_summary$coefficients[2]
lwd_confint <- confint(lwd_model)
return(list(lwd_model_summary, lwd_confint, lwd_treatment_effect))
}
## ---- lwd-model-pipeline
apply_lwd_model <- function(data, var){
prepare_var <- prep_lwd_data(data = data,
var = var)
long_data <- prepare_lwd_long(data = prepare_var,
var = var)
lwd_model <- build_lwd_model(data = long_data,
var = var)
return(lwd_model)
}
## ---- lwd-model-pipeline
model_lwd_bulk <- function(input, var){
output <- list()
sim_iterations <- length(input)
for (sim in 1:sim_iterations) {
lwd_model <- apply_lwd_model(data = input[[sim]],
var = var)
output[[paste(sim)]] <- lwd_model
}
return(output)
}
## ---- evaluate-rmse-treatment-effect
derive_treatment_rmse <- function(input, reference){
output <- c()
for (sim in 1:length(input)){
treatment_effect <- input[[sim]][[3]]
rmse_value <- sqrt(mean((
rep(reference, length(treatment_effect)) -
treatment_effect)^2))
output[sim] <- rmse_value
}
return(output)
}
## ---- evaluate-unit-record-data
evaluate_unit_record_rmse <- function(observed_data, predicted_data, observed_var, predicted_var){
observed_data[["unique_id"]] <- c(1:226)
predicted_data <- predicted_data[, c("unique_id", predicted_var)]
names(predicted_data)[names(predicted_data) == predicted_var] <- "predicted"
observed_data <- observed_data[, c("unique_id", observed_var)]
names(observed_data)[names(observed_data) == observed_var] <- "observed"
data_eval <- merge(predicted_data, observed_data, by = "unique_id")
data_eval$difference <- (data_eval$predicted - data_eval$observed)^2
rmse <- sqrt(sum(data_eval$difference, na.rm = TRUE)/nrow(data_eval))
return(rmse)
}
## ---- evaluate-unit-record-data-bulk
evaluate_unit_record_rmse_bulk <- function(observed_data, input, observed_var, predicted_var, method){
if(method == "MICE"){
input <- create_single_mice_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-4),
imp_iterations = 20)
}else if(method == "J2R"){
input <- create_single_j2r_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-4),
imp_iterations = 20)
}else if(method == "LOCF"){
input <- input
}
output <- c()
for (sim in 1:length(input)){
predicted_data <- input[[sim]]
rmse_unit_record <- evaluate_unit_record_rmse(observed_data = observed_data,
predicted_data = predicted_data,
observed_var = observed_var,
predicted_var = predicted_var)
output[sim] <- rmse_unit_record
}
return(output)
}
test <- evaluate_unit_record_rmse_bulk(observed_data = synthetic_data_subset,
input = sc_missing_mcar_20,
observed_var = "selfcare_t1",
predicted_var = "selfcare_t1_imp",
method = "MICE")
test
#MNAR-40-PA-t2
pa_t2_lwd_mnar_40_urd <- mean(
evaluate_unit_record_rmse_bulk(
observed_data = synthetic_data_subset,
input = pa_missing_mnar_40,
observed_var = "physical_activity_t2",
predicted_var = "physical_activity_t2",
method = "LWD"))
pa_t2_lwd_mnar_40_urd
#MNAR-30-PA-t2
pa_t2_lwd_mnar_30_urd <- mean(
evaluate_unit_record_rmse_bulk(
observed_data = synthetic_data_subset,
input = pa_missing_mnar_30,
observed_var = "physical_activity_t2",
predicted_var = "physical_activity_t2",
method = "LWD"))
pa_t2_lwd_mnar_30_urd
#MNAR-40-PA-t2
pa_t2_locf_mnar_40_urd <- mean(
evaluate_unit_record_rmse_bulk(
observed_data = synthetic_data_subset,
input = pa_missing_mnar_40,
observed_var = "physical_activity_t2",
predicted_var = "physical_activity_t2",
method = "LOCF"))
pa_t2_locf_mnar_40_urd
observed_data = synthetic_data_subset
input = pa_missing_mnar_40
observed_var = "physical_activity_t2"
predicted_var = "physical_activity_t2"
if(method == "MICE"){
input <- create_single_mice_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-4),
imp_iterations = 20)
}else if(method == "J2R"){
input <- create_single_j2r_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-4),
imp_iterations = 20)
}else if(method == "LOCF"){
input <- input
}
View(input)
method = "LOCF"
if(method == "MICE"){
input <- create_single_mice_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-4),
imp_iterations = 20)
}else if(method == "J2R"){
input <- create_single_j2r_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-4),
imp_iterations = 20)
}else if(method == "LOCF"){
input <- input
}
predicted_data <- input[[1]]
View(predicted_data)
if(method == "MICE"){
input <- create_single_mice_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-4),
imp_iterations = 20)
}else if(method == "J2R"){
input <- create_single_j2r_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-4),
imp_iterations = 20)
}else if(method == "LOCF"){
input <- simulate_locf_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-4))
}
input = pa_missing_mnar_40
if(method == "MICE"){
input <- create_single_mice_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-4),
imp_iterations = 20)
}else if(method == "J2R"){
input <- create_single_j2r_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-4),
imp_iterations = 20)
}else if(method == "LOCF"){
input <- simulate_locf_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-4))
}
View(input)
var = substr(observed_var, 1, nchar(observed_var)-4)
var
observed_data = synthetic_data_subset
input = pa_missing_mnar_40
observed_var = "physical_activity_t2"
predicted_var = "physical_activity_t2"
method = "LOCF"
if(method == "MICE"){
input <- create_single_mice_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-3),
imp_iterations = 20)
}else if(method == "J2R"){
input <- create_single_j2r_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-3),
imp_iterations = 20)
}else if(method == "LOCF"){
input <- simulate_locf_bulk(input = input,
var = substr(observed_var, 1, nchar(observed_var)-3))
}
View(input)
output <- c()
for (sim in 1:length(input)){
predicted_data <- input[[sim]]
rmse_unit_record <- evaluate_unit_record_rmse(observed_data = observed_data,
predicted_data = predicted_data,
observed_var = observed_var,
predicted_var = predicted_var)
output[sim] <- rmse_unit_record
}
output
